# Default values for GameMaster's Companion development environment
# Optimized for local Kind cluster with resource constraints
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "local-fast"
  domain: "gmc.local"
  # Development-specific settings
  debug: true
  logLevel: "DEBUG"
  environment: "development"
  
  # External database configuration (disabled by default)
  externalDatabase:
    enabled: false
    host: ""
    port: 5432
    username: ""
    password: ""
    database: ""
  
  # External Redis configuration (disabled by default)
  externalRedis:
    enabled: false
    host: ""
    port: 6379
    database: 0
    auth:
      enabled: false
      password: ""
  
  # External Elasticsearch configuration (disabled by default)
  externalElasticsearch:
    enabled: false
    host: ""
    port: 9200
  
  # Security settings
  jwtSecret: ""
  apiKey: ""
  encryptionKey: ""

# Application API service
api:
  enabled: true
  replicaCount: 1  # Single replica for development
  image:
    repository: gmc/api
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: NodePort
    port: 8000
    nodePort: 30000
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"
  healthCheck:
    enabled: true
    path: "/health"
    initialDelaySeconds: 30
    periodSeconds: 10
  env:
    DATABASE_URL: "postgresql://postgres:changeme@postgresql:5432/gamemaster_companion"
    REDIS_URL: "redis://redis:6379/0"
    ELASTICSEARCH_URL: "http://elasticsearch:9200"
    VLLM_API_URL: "http://vllm-service:8000"
    AI_ENABLED: "true"
    DEBUG: "true"

# Frontend web application
frontend:
  enabled: true
  replicaCount: 1
  image:
    repository: gmc/frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: NodePort
    port: 3000
    nodePort: 30007
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "100m"

# PostgreSQL database configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "changeme"
    username: "postgres"
    password: "changeme"
    database: "gamemaster_companion"
  primary:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "local-fast"
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "250m"
    service:
      type: NodePort
      nodePorts:
        postgresql: 30001

# Redis cache configuration
redis:
  enabled: true
  auth:
    enabled: false  # Disabled for development
  master:
    persistence:
      enabled: true
      size: 2Gi
      storageClass: "local-cache"
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
    service:
      type: NodePort
      nodePorts:
        redis: 30002

# AI and ML services
ai:
  vllm:
    enabled: true
    replicaCount: 1
    image:
      repository: vllm/vllm-openai
      tag: "latest"
      pullPolicy: IfNotPresent
    model: "microsoft/DialoGPT-medium"
    maxModelLen: 2048  # Reduced for development
    gpuMemoryUtilization: 0.7
    service:
      type: NodePort
      port: 8000
      nodePort: 30004
    resources:
      requests:
        memory: "2Gi"
        cpu: "1000m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "local-bulk"
      mountPath: "/root/.cache/huggingface"
    nodeSelector:
      workload: "ai-intensive"
  
  audioProcessor:
    enabled: true
    replicaCount: 1
    image:
      repository: gmc/audio-processor
      tag: "latest"
      pullPolicy: IfNotPresent
    service:
      type: NodePort
      port: 8001
      nodePort: 30006
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    env:
      DIART_MODEL: "pyannote/segmentation-3.0"
      DIART_STEP: "0.5"
      DIART_LATENCY: "0.5"
      REDIS_URL: "redis://redis:6379/1"

# Search functionality
search:
  elasticsearch:
    enabled: true
    clusterName: "gmc-search"
    nodeGroup: "master"
    masterService: "elasticsearch"
    replicas: 1
    minimumMasterNodes: 1
    esMajorVersion: ""
    esConfig:
      elasticsearch.yml: |
        cluster.name: "gmc-search"
        network.host: 0.0.0.0
        discovery.type: single-node
        xpack.security.enabled: false
        xpack.security.enrollment.enabled: false
    volumeClaimTemplate:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-fast"
      resources:
        requests:
          storage: 5Gi
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    service:
      type: NodePort
      nodePort: 30003

# Monitoring stack (simplified for development)
monitoring:
  enabled: true
  kube-prometheus-stack:
    grafana:
      enabled: true
      service:
        type: NodePort
        nodePort: 30005
      adminPassword: "admin"
      persistence:
        enabled: false  # Disabled for development
      resources:
        requests:
          cpu: "50m"
          memory: "128Mi"
        limits:
          cpu: "100m"
          memory: "256Mi"
    prometheus:
      prometheusSpec:
        replicas: 1
        retention: "7d"  # Short retention for development
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "local-fast"
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 5Gi
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "200m"
            memory: "512Mi"

# External integrations
integrations:
  discord:
    enabled: false  # Disabled by default in development
    botToken: ""
    webhookSupport: true
  
  dndbeyond:
    enabled: false  # Disabled by default in development
    apiSupport: true
    characterImport: true

# Ingress configuration for local development
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: gmc.local
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: frontend
              port: 3000
        - path: /api
          pathType: Prefix
          backend:
            service:
              name: api
              port: 8000
  tls: []

# Development utilities
development:
  # Create development databases and test data
  seedData:
    enabled: true
    testCampaigns: 3
    testCharacters: 10
    testSessions: 15
  
  # Enable debug endpoints
  debugEndpoints:
    enabled: true
    metrics: true
    profiling: true

# Resource quotas for development namespace
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "4"
    requests.memory: "8Gi"
    limits.cpu: "8"
    limits.memory: "16Gi"
    persistentvolumeclaims: "20"

# Network policies (relaxed for development)
networkPolicy:
  enabled: false  # Disabled for easier development

# Backup configuration (simplified for development)
backup:
  enabled: false  # Disabled by default in development
  schedule: "0 2 * * *"
  retention: "3d"

# Service account configuration
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""